name: Release from Project Version

on:
  workflow_dispatch:
  push:
    branches:
      - main  # Замени на свою ветку при необходимости

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from csproj or AssemblyInfo.cs
        id: version
        shell: pwsh
        run: |
          $version = $null
          $csproj = Get-ChildItem -Path . -Filter *.csproj -Recurse | Select-Object -First 1
          if ($csproj) {
            [xml]$xml = Get-Content $csproj.FullName
            $version = $xml.Project.PropertyGroup.AssemblyVersion
          }
          if (-not $version) {
            $assinfo = Get-ChildItem -Path . -Filter AssemblyInfo.cs -Recurse | Select-Object -First 1
            if ($assinfo) {
              $content = Get-Content $assinfo.FullName | Select-String 'AssemblyVersion\("([0-9\.]+)"\)'
              if ($content.Matches.Count -gt 0) {
                $version = $content.Matches[0].Groups[1].Value
              }
            }
          }
          if (-not $version) { $version = "0.1.0" }
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "🔖 Проектная версия: $version"

      - name: Set tag name
        id: tag
        run: echo "tag=v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Create git tag if not exists
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          $tag = "${{ steps.tag.outputs.tag }}"
          $exists = git tag --list $tag
          if (-not $exists) {
            git tag $tag
            git push origin $tag
          } else {
            Write-Host "Tag $tag already exists, skipping creation."
          }

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore

      - name: Build solution
        run: msbuild /p:Configuration=Release

      - name: Find output directory with framework subfolder
        id: find_output
        shell: pwsh
        run: |
          $csproj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
          $projDir = Split-Path $csproj.FullName
          $releaseDir = Join-Path $projDir 'bin\Release'
          $frameworkDir = Get-ChildItem $releaseDir -Directory | Where-Object { $_.Name -like "net*" } | Select-Object -First 1
          if ($frameworkDir) {
            $outDir = $frameworkDir.FullName
          } else {
            $outDir = $releaseDir
          }
          echo "output_dir=$outDir" >> $env:GITHUB_OUTPUT

      - name: Prepare AirportsDB folder
        shell: pwsh
        run: |
          $dest = "AirportsDB"
          if (Test-Path $dest) { Remove-Item $dest -Recurse -Force }
          New-Item -ItemType Directory -Path $dest | Out-Null
          Copy-Item "${{ steps.find_output.outputs.output_dir }}\*" $dest -Recurse -Force
          if (Test-Path airports.csv) { Copy-Item airports.csv $dest }

      - name: Zip AirportsDB folder
        run: Compress-Archive -Path AirportsDB -DestinationPath AirportsDB-${{ steps.version.outputs.version }}.zip
        shell: pwsh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: AirportsDB-${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
