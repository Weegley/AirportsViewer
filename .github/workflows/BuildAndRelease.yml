name: Build and Release (.NET Framework 4.5)

permissions:
  contents: write
on: 
  workflow_dispatch:
  push:
    tags:
    - 'v*'
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - 'LICENSE'
      - '**/*.ico'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'


jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore

      - name: Build solution (.sln)
        run: msbuild /p:Configuration=Release

      - name: Find output directory with framework subfolder
        id: find_output
        shell: pwsh
        run: |
          $csproj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
          $projDir = Split-Path $csproj.FullName
          $releaseDir = Join-Path $projDir 'bin\Release'
          $frameworkDir = Get-ChildItem $releaseDir -Directory | Where-Object { $_.Name -like "net*" } | Select-Object -First 1
          if ($frameworkDir) {
            $outDir = $frameworkDir.FullName
          } else {
            $outDir = $releaseDir
          }
          echo "output_dir=$outDir" >> $env:GITHUB_OUTPUT

      - name: Prepare AirportsDB folder
        shell: pwsh
        run: |
          $dest = "AirportsDB"
          if (Test-Path $dest) { Remove-Item $dest -Recurse -Force }
          New-Item -ItemType Directory -Path $dest
          Copy-Item "${{ steps.find_output.outputs.output_dir }}\*" $dest -Recurse -Force
          if (Test-Path airports.csv) { Copy-Item airports.csv $dest }

      - name: Zip AirportsDB folder
        run: Compress-Archive -Path AirportsDB -DestinationPath AirportsViewer-win-net45.zip
        shell: pwsh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: AirportsViewer-win-net45.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
