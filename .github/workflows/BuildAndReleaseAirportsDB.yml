name: Build & Release AirportsDB

permissions:
  contents: write
on: 
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - 'LICENSE'
      - '**/*.ico'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üîç Extract version from AssemblyInfo.cs
        id: get_version
        shell: pwsh
        run: |
          $version = $null
          $csproj = Get-ChildItem -Path . -Filter *.csproj -Recurse | Select-Object -First 1
          if ($csproj) {
            [xml]$xml = Get-Content $csproj.FullName
            $version = $xml.Project.PropertyGroup.AssemblyVersion
          }
          if (-not $version) {
            $assinfo = Get-ChildItem -Path . -Filter AssemblyInfo.cs -Recurse | Select-Object -First 1
            if ($assinfo) {
              $content = Get-Content $assinfo.FullName | Select-String 'AssemblyVersion\("([0-9\.]+)"\)'
              if ($content.Matches.Count -gt 0) {
                $version = $content.Matches[0].Groups[1].Value
              }
            }
          }
          if (-not $version) { $version = "0.1.0" }
          $version = $version.Trim()
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "üîñ –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è: $version"


      - name: üõ† Set up MSBuild
        uses: microsoft/setup-msbuild@v1.3.1

      - name: üì¶ Restore NuGet packages
        run: nuget restore AirportsViewer.sln

      - name: ‚öôÔ∏è Build solution
        run: msbuild AirportsViewer.sln /p:Configuration=Release

      - name: üß≥ Archive build output
        run: |
          $target = Get-ChildItem -Path .\AirportsViewer\bin\Release\ -Directory | Where-Object { $_.Name -like 'net*' } | Select-Object -First 1
          mkdir output\AirportsDB
          echo $target
          Copy-Item -Path "$($target.FullName)\*" -Destination output\AirportsDB -Recurse -Force
          Compress-Archive -Path output\AirportsDB -DestinationPath AirportsDB-Windows.zip

      - name: ‚¨ÜÔ∏è Upload artifact to Actions
        uses: actions/upload-artifact@v4
        with:
          name: AirportsDB-Windows
          path: AirportsDB-Windows.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: AirportsDB-Windows

      - name: Get version from build job
        run: echo "Version is ${{ needs.build.outputs.version }}"

      - name: Create tag if not exists (robust)
        run: |
          TAG="v${{ needs.build.outputs.version }}"
          if git ls-remote --tags origin | grep "refs/tags/$TAG$"; then
            echo "Tag already exists: $TAG"
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Read changelog for this version
        id: changelog
        run: |
          VERSION="v${{ needs.build.outputs.version }}"
          # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞
          # –ú–µ–Ω—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ —Å–≤–æ–π —Å—Ç–∏–ª—å!
          TEXT=$(awk "/^## \\[?$VERSION\\]?/ {flag=1;next} /^## /{flag=0} flag" CHANGELOG.md | sed '/^[[:space:]]*$/d')
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$TEXT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: NanoBin v${{ needs.build.outputs.version }}
          body: ${{ steps.changelog.outputs.body }}
          files: AirportsDB-Windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
